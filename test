const XLSX = require('xlsx');
const mongoose = require('mongoose');

// Connect to MongoDB
mongoose.connect('mongodb://localhost:27017/employeeDB', { useNewUrlParser: true, useUnifiedTopology: true });

// Define a schema for employee
const employeeSchema = new mongoose.Schema({
    EmployeeID: { type: String, required: true, unique: true },
    Name: String,
    Department: String,
    Salary: Number
});

const Employee = mongoose.model('Employee', employeeSchema);

// Load the Excel file
const workbook = XLSX.readFile('employees.xlsx');
const sheet_name_list = workbook.SheetNames;
const sheet = workbook.Sheets[sheet_name_list[0]];

// Convert the sheet to JSON
let employeeData = XLSX.utils.sheet_to_json(sheet);

// Function to update or create employee data
async function updateEmployeeData(employeeId, newData) {
    try {
        // Find the employee by ID
        let employee = await Employee.findOne({ EmployeeID: employeeId });

        if (employee) {
            // Employee exists, update their data
            Object.assign(employee, newData);
            await employee.save();
            console.log(`Updated employee with ID: ${employeeId}`);
        } else {
            // Employee does not exist, create new entry
            employee = new Employee({ EmployeeID: employeeId, ...newData });
            await employee.save();
            console.log(`Added new employee with ID: ${employeeId}`);
        }
    } catch (error) {
        console.error(`Error updating/creating employee with ID: ${employeeId}`, error);
    }
}

// Process all employee data from the Excel sheet
async function processEmployeeData() {
    for (const emp of employeeData) {
        const { EmployeeID, ...newData } = emp;
        await updateEmployeeData(EmployeeID, newData);
    }
    console.log('All employee data processed successfully.');
}

// Start the processing
processEmployeeData().then(() => mongoose.disconnect());